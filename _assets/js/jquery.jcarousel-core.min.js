(function (root, factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else if (typeof exports === "object") {
    module.exports = factory(require("jquery"));
  } else {
    root.imgScroll = factory(root.jQuery);
  }
})(this, function ($) {
  var imgScroll = function (opt) {
    var _d = {
      wrap: null,
      listTag: "ul",
      itemTag: "li",
      btn01: null,
      btn02: null,
      direction: "horizontal",
      step: null,
      speed: 500,
      isSeamless: true,
      isScreen: true,
      count: 1,
    };

    var arg = $.extend(_d, opt);

    var list = $(arg.wrap).find(arg.listTag);
    var items = list.find(arg.itemTag);
    var btn01 = $(arg.wrap).find(arg.btn01);
    var btn02 = $(arg.wrap).find(arg.btn02);
    var len = items.length;
    var index = 0;
    var direction = arg.direction;
    var s = arg.speed;
    var isSeamless = arg.isSeamless;
    var isScreen = arg.isScreen;
    var c = arg.count;
    var l = Math.ceil(len / c);

    function lazyLoad(index, items) {
      items
        .eq(index)
        .find("img")
        .each(function () {
          if ($(this).attr("src3")) {
            $(this).attr("src", $(this).attr("src3"));
            $(this).removeAttr("src3");
          }
        });
    }

    //
    if (direction === "horizontal") {
      var w = arg.step;
      $(btn01).click(function () {
        if (len <= c || list.is(":animated")) {
          return false;
        }
        if (isSeamless) {
          if (isScreen) {
            var last = list.find(arg.itemTag).last();
            index--;
            if (index == -1) {
              last.css({ position: "relative", left: -w * len });
              list.stop().animate({ "margin-left": w }, s, function () {
                if (index == -1) {
                  index = len - 1;
                }
                list.css({ "margin-left": -w * (len - 1) });
                last.removeAttr("style");
              });
            } else {
              list.stop().animate({ "margin-left": -w * index }, s);
            }
            lazyLoad(index, items);
          } else {
            index--;
            if (index == -len) {
              index = 0;
            }
            lazyLoad(index, items);
            list.css("margin-left", -w);
            list.find(arg.itemTag).last().clone().prependTo(list);
            list.stop().animate({ "margin-left": 0 }, s, function () {
              list.find(arg.itemTag).last().remove();
            });
          }
        } else {
          index--;
          if (isScreen) {
            if (index == -1) {
              index = len - 1;
            }
            lazyLoad(index, items);
          } else {
            if (index == -1) {
              index = len - c;
              for (var i = len - c; i < len; i++) {
                lazyLoad(i, items);
              }
            }
            var j = index + c;
            lazyLoad(j - 1, items);
          }
          list.stop().animate({ "margin-left": -w * index }, s);
        }
      });
      $(btn02).click(function () {
        if (len <= c || list.is(":animated")) {
          return false;
        }
        if (isSeamless) {
          if (isScreen) {
            var first = list.find(arg.itemTag).first();
            index++;
            if (index == len) {
              first.css({ position: "relative", left: w * len });
              list.stop().animate({ "margin-left": -w * len }, s, function () {
                if (index == len) {
                  index = 0;
                }
                list.css({ "margin-left": 0 });
                first.removeAttr("style");
              });
            } else {
              list.stop().animate({ "margin-left": -w * index }, s);
            }
            lazyLoad(index, items);
          } else {
            index++;
            if (index == len - 1) {
              index = 0;
            }
            lazyLoad(index + c - 1, items);
            list.css("margin-left", 0);
            list.find(arg.itemTag).first().clone().appendTo(list);
            list.stop().animate({ "margin-left": -w }, s, function () {
              list.find(arg.itemTag).first().remove();
              list.css("margin-left", 0);
            });
          }
        } else {
          index++;
          if (isScreen) {
            if (index == len) {
              index = 0;
            }
            lazyLoad(index, items);
          } else {
            if (index == len - c + 1) {
              index = 0;
            }
            var j = index + c;
            lazyLoad(j - 1, items);
          }
          list.stop().animate({ "margin-left": -w * index }, s);
        }
      });
    } else if (direction === "vertical") {
      var h = arg.step;
      $(btn01).click(function () {
        if (len <= c || list.is(":animated")) {
          return false;
        }
        if (isSeamless) {
          if (isScreen) {
            var last = list.find(arg.itemTag).last();
            index--;
            if (index == -1) {
              last.css({ position: "relative", top: -h * len });
              list.stop().animate({ "margin-top": h }, s, function () {
                if (index == -1) {
                  index = len - 1;
                }
                list.css({ "margin-top": -h * (len - 1) });
                last.removeAttr("style");
              });
            } else {
              list.stop().animate({ "margin-top": -h * index }, s);
            }
            lazyLoad(index, items);
          } else {
            index--;
            if (index == -len) {
              index = 0;
            }
            lazyLoad(index, items);
            list.css("margin-top", -h);
            list.find(arg.itemTag).last().clone().prependTo(list);
            list.stop().animate({ "margin-top": 0 }, s, function () {
              list.find(arg.itemTag).last().remove();
            });
          }
        } else {
          index--;
          if (isScreen) {
            if (index == -1) {
              index = len - 1;
            }
            lazyLoad(index, items);
          } else {
            if (index == -1) {
              index = len - c;
              for (var i = len - c; i < len; i++) {
                lazyLoad(i, items);
              }
            }
            var j = index + c;
            lazyLoad(j - 1, items);
          }
          list.stop().animate({ "margin-top": -h * index }, s);
        }
      });
      $(btn02).click(function () {
        if (len <= c || list.is(":animated")) {
          return false;
        }
        if (isSeamless) {
          if (isScreen) {
            var first = list.find(arg.itemTag).first();
            index++;
            if (index == len) {
              first.css({ position: "relative", top: h * len });
              list.stop().animate({ "margin-top": -h * len }, s, function () {
                if (index == len) {
                  index = 0;
                }
                list.css({ "margin-top": 0 });
                first.removeAttr("style");
              });
            } else {
              list.stop().animate({ "margin-top": -h * index }, s);
            }
            lazyLoad(index, items);
          } else {
            index++;
            if (index == len - 1) {
              index = 0;
            }
            lazyLoad(index + c - 1, items);
            list.css("margin-top", 0);
            list.find(arg.itemTag).first().clone().appendTo(list);
            list.stop().animate({ "margin-top": -h }, s, function () {
              list.find(arg.itemTag).first().remove();
              list.css("margin-top", 0);
            });
          }
        } else {
          index++;
          if (isScreen) {
            if (index == len) {
              index = 0;
            }
            lazyLoad(index, items);
          } else {
            if (index == len - c + 1) {
              index = 0;
            }
            var j = index + c;
            lazyLoad(j - 1, items);
          }
          list.stop().animate({ "margin-top": -h * index }, s);
        }
      });
    }
  };

  $.fn.imgScroll = function (opt) {
    var ext = {
      wrap: $(this),
    };

    opt = $.extend(opt, ext);

    imgScroll(opt);
  };

  return imgScroll;
});
